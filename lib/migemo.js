// Generated by LiveScript 1.4.0
(function(){
  var ref$, mappings, hiragana, katakana, hwkatakana, romaji, reading2kanji, toHiragana, toKatakana, toHalfWidthKatakana, toKanji, findInTree, prune, memoizeUnary, hiraToKanji, hiraToKata, hiraToHwkata, toRegex, getNextHiragana, startsWith, out$ = typeof exports != 'undefined' && exports || this;
  ref$ = require('./mapping'), mappings = ref$.mappings, hiragana = ref$.hiragana, katakana = ref$.katakana, hwkatakana = ref$.hwkatakana, romaji = ref$.romaji;
  reading2kanji = require('../data/jisho.json');
  out$.toHiragana = toHiragana = function(roma){
    var hira, ref$, nh, ro;
    hira = '';
    while (roma.length > 0) {
      ref$ = getNextHiragana(roma), nh = ref$[0], ro = ref$[1];
      hira += nh;
      roma = roma.substr(ro.length);
    }
    return hira;
  };
  out$.toKatakana = toKatakana = function(roma){
    return hiraToKata(toHiragana(roma));
  };
  out$.toHalfWidthKatakana = toHalfWidthKatakana = function(roma){
    return hiraToHwkata(toHiragana(roma));
  };
  out$.toKanji = toKanji = function(roma){
    return hiraToKanji(toHiragana(roma)).join('|');
  };
  out$.findInTree = findInTree = function(reading, tree){
    var letters, node, i$, len$, ll, e, q, out, cn, key, value;
    if (reading === '') {
      return [];
    }
    letters = reading.split('');
    node = tree;
    for (i$ = 0, len$ = letters.length; i$ < len$; ++i$) {
      ll = letters[i$];
      try {
        node = node[ll];
      } catch (e$) {
        e = e$;
        return [];
      }
    }
    if (!node) {
      return [];
    }
    q = [node];
    out = [];
    while (q.length > 0) {
      cn = q.shift();
      if (cn.w) {
        out = out.concat(cn.w);
      }
      for (key in cn) {
        value = cn[key];
        if (key === 'w') {
          continue;
        }
        q.push(value);
      }
    }
    return out;
  };
  out$.prune = prune = function(words){
    var out, head;
    if (words.length === 0) {
      return [];
    }
    words.sort();
    out = [words.shift()];
    while (words.length > 0) {
      head = words.shift();
      if (!startsWith(head, out[out.length - 1])) {
        out.push(head);
      }
    }
    return out;
  };
  memoizeUnary = function(f){
    var cache;
    cache = {};
    return function(a){
      if (cache[a]) {
        return cache[a];
      }
      return cache[a] = f(a);
    };
  };
  hiraToKanji = memoizeUnary(function(hira){
    var ref$, ref1$, head, tails, out, i$, len$, tail;
    if ((ref$ = reading2kanji[hira]) != null && ref$.rapid) {
      return reading2kanji[hira].rapid;
    }
    if (hira[hira.length - 1] === ']') {
      ref1$ = hira.split('['), head = ref1$[0], tails = ref1$[1];
      tails = tails.substr(0, tails.length - 1);
      out = [];
      for (i$ = 0, len$ = tails.length; i$ < len$; ++i$) {
        tail = tails[i$];
        out = out.concat(prune(findInTree(head + tail, reading2kanji)));
      }
      return out;
    }
    return prune(findInTree(hira, reading2kanji));
  });
  hiraToKata = function(hira){
    return hira.split('').map(function(it){
      return katakana[hiragana.indexOf(it)] || it;
    }).join('');
  };
  hiraToHwkata = function(hira){
    return hira.split('').map(function(it){
      return hwkatakana[hiragana.indexOf(it)] || it;
    }).join('');
  };
  out$.toRegex = toRegex = function(roma){
    var hira, kata, hwkata, kanji, regstring;
    hira = toHiragana(roma);
    hira = hira.replace(/[a-z]$/, '');
    if (hira === '') {
      return new RegExp(roma, 'i');
    }
    kata = hiraToKata(hira);
    hwkata = hiraToHwkata(hira);
    kanji = hiraToKanji(hira);
    regstring = [roma, hira, kata, hwkata].join('|');
    if (kanji.length) {
      regstring += '|' + kanji.join('|');
    }
    return new RegExp(regstring, 'i');
  };
  getNextHiragana = function(roma){
    var i$, ll, short, out, ref$, len$, vowel, index;
    if (roma === "n") {
      return ['[んなにぬねの]', roma];
    }
    for (i$ = 4; i$ >= 1; --i$) {
      ll = i$;
      short = roma.substr(0, ll);
      if (mappings[short]) {
        return [mappings[short].hiragana, short];
      }
    }
    if (roma.length > 1 && roma[0] === roma[1]) {
      return ['っ', roma[0]];
    }
    if (roma.length === 1 && -1 === "aeiou".indexOf(roma[0])) {
      out = "[";
      for (i$ = 0, len$ = (ref$ = ['a', 'i', 'u', 'e', 'o']).length; i$ < len$; ++i$) {
        vowel = ref$[i$];
        index = romaji.indexOf(roma[0] + vowel);
        if (-1 < index) {
          out += hiragana[index];
        }
      }
      if (out.length > 1) {
        return [out + "]", roma[0]];
      }
    }
    return [roma[0], roma[0]];
  };
  startsWith = function(str, prefix){
    return prefix === str.substr(0, prefix.length);
  };
}).call(this);
