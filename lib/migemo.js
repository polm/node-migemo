// Generated by LiveScript 1.4.0
(function(){
  var hiragana, katakana, hwkatakana, rLabels, reading2kanji, toHiragana, toKatakana, toHalfWidthKatakana, toKanji, hiraToKanji, hiraToKata, hiraToHwkata, toRegex, getNextHiragana, startsWith, out$ = typeof exports != 'undefined' && exports || this;
  hiragana = "あいうえおかきくけこさしすせそたちつてとなにぬねのはひふふへほまみむめもやゆよらりるれろわをん".split('');
  katakana = "アイウエオカキクケコサシスセソタチツテトナニヌネノハヒフフヘホマミムメモヤユヨラリルレロワヲン".split('');
  hwkatakana = "ｱｲｳｴｵｶｷｸｹｺｻｼｽｾｿﾀﾁﾂﾃﾄﾅﾆﾇﾈﾉﾊﾋﾌﾌﾍﾎﾏﾐﾑﾒﾓﾔﾕﾖﾗﾘﾙﾚﾛﾜｦﾝ".split('');
  rLabels = ['a', 'i', 'u', 'e', 'o', 'ka', 'ki', 'ku', 'ke', 'ko', 'sa', 'si', 'su', 'se', 'so', 'ta', 'ti', 'tu', 'te', 'to', 'na', 'ni', 'nu', 'ne', 'no', 'ha', 'hi', 'fu', 'hu', 'he', 'ho', 'ma', 'mi', 'mu', 'me', 'mo', 'ya', 'yu', 'yo', 'ra', 'ri', 'ru', 're', 'ro', 'wa', 'wo', 'nn'];
  hiragana = hiragana.concat("ぁぃぇぅぉゃゅょっっ".split(''));
  katakana = katakana.concat("ァィゥェォャュョッッ".split(''));
  hwkatakana = hwkatakana.concat("ｧｨｩｪｫｬｭｮｯｯ".split(''));
  rLabels = rLabels.concat(['xa', 'xi', 'xu', 'xe', 'xo', 'xya', 'xyu', 'xyo', 'xtu', 'xtsu']);
  hiragana = hiragana.concat(['しゃ', 'し', 'しゅ', 'しょ', 'しゃ', 'し', 'しゅ', 'しょ', 'ちゃ', 'ち', 'ちゅ', 'ちぇ', 'ちょ', 'ちゃ', 'ち', 'ちゅ', 'ちぇ', 'ちょ', 'じゃ', 'じ', 'じゅ', 'じょ', 'じゃ', 'じ', 'じゅ', 'じょ']);
  katakana = katakana.concat(['シャ', 'シ', 'シュ', 'ショ', 'シャ', 'シ', 'シュ', 'ショ', 'チャ', 'チ', 'チュ', 'チェ', 'チョ', 'チャ', 'チ', 'チュ', 'チェ', 'チョ', 'ジャ', 'ジ', 'ジュ', 'ジョ', 'ジャ', 'ジ', 'ジュ', 'ジョ']);
  hwkatakana = hwkatakana.concat(['ｼｬ', 'ｼ', 'ｼｭ', 'ｼｮ', 'ｼｬ', 'ｼ', 'ｼｭ', 'ｼｮ', 'ﾁｬ', 'ﾁ', 'ﾁｭ', 'ﾁｪ', 'ﾁｮ', 'ﾁｬ', 'ﾁ', 'ﾁｭ', 'ﾁｪ', 'ﾁｮ', 'ｼﾞｬ', 'ｼﾞ', 'ｼﾞｭ', 'ｼﾞｪ', 'ｼﾞｬ', 'ｼﾞ', 'ｼﾞｭ', 'ｼﾞｮ']);
  rLabels = rLabels.concat(['sha', 'shi', 'shu', 'sho', 'sya', 'si', 'syu', 'syo', 'cha', 'chi', 'chu', 'che', 'cho', 'tya', 'ti', 'tyu', 'tye', 'tyo', 'ja', 'ji', 'ju', 'jo', 'zya', 'zi', 'zyu', 'zyo']);
  hiragana = hiragana.concat(['きゃ', 'きゅ', 'きょ', 'ぎゃ', 'ぎゅ', 'ぎょ', 'にゃ', 'にゅ', 'にょ', 'ひゃ', 'ひゅ', 'ひょ', 'びゃ', 'びゅ', 'びょ', 'ぴゃ', 'ぴゅ', 'ぴょ', 'みゃ', 'みゅ', 'みょ', 'りゃ', 'りゅ', 'りょ']);
  katakana = katakana.concat(['キャ', 'キュ', 'キョ', 'ギャ', 'ギュ', 'ギョ', 'ニャ', 'ニュ', 'ニョ', 'ヒャ', 'ヒュ', 'ヒョ', 'ビャ', 'ビュ', 'ビョ', 'ピャ', 'ピュ', 'ピョ', 'ミャ', 'ミュ', 'ミョ', 'リャ', 'リュ', 'リョ']);
  hwkatakana = hwkatakana.concat(['ｷｬ', 'ｷｭ', 'ｷｮ', 'ｷﾞｬ', 'ｷﾞｭ', 'ｷﾞｮ', 'ﾆｬ', 'ﾆｭ', 'ﾆｮ', 'ﾋｬ', 'ﾋｭ', 'ﾋｮ', 'ﾋﾞｬ', 'ﾋﾞｭ', 'ﾋﾞｮ', 'ﾋﾟｬ', 'ﾋﾟｭ', 'ﾋﾟｮ', 'ﾐｬ', 'ﾐｭ', 'ﾐｮ', 'ﾘｬ', 'ﾘｭ', 'ﾘｮ']);
  rLabels = rLabels.concat(['kya', 'kyu', 'kyo', 'gya', 'gyu', 'gyo', 'nya', 'nyu', 'nyo', 'hya', 'hyu', 'hyo', 'bya', 'byu', 'byo', 'pya', 'pyu', 'pyo', 'mya', 'myu', 'myo', 'rya', 'ryu', 'ryo']);
  hiragana = hiragana.concat("がぎぐげござじずぜぞだぢづでどばびぶべぼぱぴぷぺぽ".split(''));
  katakana = katakana.concat("ガギグゲゴザジズゼゾダヂヅデドバビブベボパピプペポ".split(''));
  hwkatakana = hwkatakana.concat(['ｶﾞ', 'ｷﾞ', 'ｸﾞ', 'ｹﾞ', 'ｺﾞ', 'ｻﾞ', 'ｼﾞ', 'ｽﾞ', 'ｾﾞ', 'ｿﾞ', 'ﾀﾞ', 'ﾁﾞ', 'ﾂﾞ', 'ﾃﾞ', 'ﾄﾞ', 'ﾊﾞ', 'ﾋﾞ', 'ﾌﾞ', 'ﾍﾞ', 'ﾎﾞ', 'ﾊﾟ', 'ﾋﾟ', 'ﾌﾟ', 'ﾍﾟ', 'ﾎﾟ']);
  rLabels = rLabels.concat(['ga', 'gi', 'gu', 'ge', 'go', 'za', 'zi', 'zu', 'ze', 'zo', 'da', 'di', 'du', 'de', 'do', 'ba', 'bi', 'bu', 'be', 'bo', 'pa', 'pi', 'pu', 'pe', 'po']);
  hiragana = hiragana.concat(["ー", "ん"]);
  katakana = katakana.concat(["ー", "ン"]);
  hwkatakana = hwkatakana.concat(["ｰ", "ﾝ"]);
  rLabels = rLabels.concat(['-', 'n']);
  reading2kanji = require('../data/jisho.json');
  out$.toHiragana = toHiragana = function(roma){
    var hira, ref$, nh, ro;
    hira = '';
    while (roma.length > 0) {
      ref$ = getNextHiragana(roma), nh = ref$[0], ro = ref$[1];
      hira += nh;
      roma = roma.substr(ro.length);
    }
    return hira;
  };
  out$.toKatakana = toKatakana = function(roma){
    return hiraToKata(toHiragana(roma));
  };
  out$.toHalfWidthKatakana = toHalfWidthKatakana = function(roma){
    return hiraToHwkata(toHiragana(roma));
  };
  out$.toKanji = toKanji = function(roma){
    var hira;
    hira = toHiragana(roma);
    if (hiraToKanji(hira)) {
      return hiraToKanji(hira).join('|');
    } else {
      return '';
    }
  };
  hiraToKanji = function(hira){
    return reading2kanji[hira];
  };
  hiraToKata = function(hira){
    return hira.split('').map(function(it){
      return katakana[hiragana.indexOf(it)] || it;
    }).join('');
  };
  hiraToHwkata = function(hira){
    return hira.split('').map(function(it){
      return hwkatakana[hiragana.indexOf(it)] || it;
    }).join('');
  };
  out$.toRegex = toRegex = function(roma){
    var hira, kata, hwkata, kanji, regstring;
    hira = toHiragana(roma);
    kata = hiraToKata(hira);
    hwkata = hiraToHwkata(hira);
    kanji = hiraToKanji(hira);
    regstring = [roma, hira, kata, hwkata].join('|');
    if (kanji) {
      regstring += '|' + kanji.join('|');
    }
    return new RegExp(regstring, 'i');
  };
  getNextHiragana = function(roma){
    var i$, to$, ii, ro;
    for (i$ = 0, to$ = rLabels.length; i$ < to$; ++i$) {
      ii = i$;
      ro = rLabels[ii];
      if (startsWith(roma, ro)) {
        return [hiragana[ii], ro];
      }
    }
    if (roma.length > 1 && roma[0] === roma[1]) {
      return ['っ', roma[0]];
    }
    /*
    # if it's the last character and a consonant, try all completions
    if roma.length == 1 and -1 == "aeiou".index-of roma.0
      out = "["
      for vowel in <[ a i u e o ]>
        index = r-labels.index-of (roma.0 + vowel)
        if -1 < index
          out += hiragana[index]
      if out.length > 1
        return [ out + "]", roma[0] ]
    */
    return [roma[0], roma[0]];
  };
  startsWith = function(str, prefix){
    return prefix === str.substr(0, prefix.length);
  };
}).call(this);
